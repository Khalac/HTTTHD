// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestConnect.Data;

#nullable disable

namespace TestConnect.Migrations
{
    [DbContext(typeof(HealthCareDBContext))]
    partial class HealthCareDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestConnect.Domain.Chinh_Sach", b =>
                {
                    b.Property<Guid>("Id_ChinhSach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<long>("MonthlyPay")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_ChinhSach");

                    b.ToTable("Chinh_Sach");
                });

            modelBuilder.Entity("TestConnect.Domain.Khach_Hang", b =>
                {
                    b.Property<Guid>("Id_Khach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birhday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_Login_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Khach");

                    b.HasIndex("User_Login_id");

                    b.ToTable("Khach_Hang");
                });

            modelBuilder.Entity("TestConnect.Domain.Khach_Hang_Chinh_Sach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_ChinhSach")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Khach")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_ChinhSach");

                    b.HasIndex("Id_Khach");

                    b.ToTable("Khach_Hang_Chinh_Sach");
                });

            modelBuilder.Entity("TestConnect.Domain.Nhan_Vien", b =>
                {
                    b.Property<Guid>("Id_NhanVien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birhday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NhanVien_Login_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_NhanVien");

                    b.HasIndex("NhanVien_Login_id");

                    b.ToTable("Nhan_Vien");
                });

            modelBuilder.Entity("TestConnect.Domain.User_Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User_Login");
                });

            modelBuilder.Entity("TestConnect.Domain.Khach_Hang", b =>
                {
                    b.HasOne("TestConnect.Domain.User_Login", "User_Login")
                        .WithMany()
                        .HasForeignKey("User_Login_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_Login");
                });

            modelBuilder.Entity("TestConnect.Domain.Khach_Hang_Chinh_Sach", b =>
                {
                    b.HasOne("TestConnect.Domain.Chinh_Sach", "Chinh_Sach")
                        .WithMany()
                        .HasForeignKey("Id_ChinhSach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestConnect.Domain.Khach_Hang", "Khach_Hang")
                        .WithMany()
                        .HasForeignKey("Id_Khach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chinh_Sach");

                    b.Navigation("Khach_Hang");
                });

            modelBuilder.Entity("TestConnect.Domain.Nhan_Vien", b =>
                {
                    b.HasOne("TestConnect.Domain.User_Login", "User_Login")
                        .WithMany()
                        .HasForeignKey("NhanVien_Login_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_Login");
                });
#pragma warning restore 612, 618
        }
    }
}
